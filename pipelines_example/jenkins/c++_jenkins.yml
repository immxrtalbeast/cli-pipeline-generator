pipeline {
    agent any
    
    environment {
        CXX_STANDARD = '17'
        BUILD_TYPE = 'Release'
    }
    
    tools {
        cmake 'CMake'
        gcc 'GCC'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup') {
            steps {
                sh 'g++ --version'
                sh 'cmake --version'
                sh 'make --version'
            }
        }
        
        stage('Dependencies') {
            steps {
                sh 'apt-get update'
                sh 'apt-get install -y build-essential cmake g++ make'
            }
        }
        
        stage('Configure') {
            steps {
                sh 'cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_STANDARD=$CXX_STANDARD'
            }
        }
        
        stage('Build') {
            steps {
                sh 'cmake --build build --config $BUILD_TYPE'
            }
        }

        stage('Test') {
            steps {
                sh 'ctest --test-dir build --output-on-failure'
            }
            post {
                always {
                    publishTestResults testResultsPattern: '**/test-results.xml'
                }
            }
        }

        stage('Static Analysis') {
            steps {
                sh 'apt-get install -y clang-tidy cppcheck'
                sh 'cppcheck --enable=all --inconclusive --std=c++$CXX_STANDARD src/ include/ || true'
                sh 'find src/ include/ -name "*.cpp" -o -name "*.h" | xargs clang-tidy -p build/ || true'
            }
        }
        
        stage('Code Format') {
            steps {
                sh 'apt-get install -y clang-format'
                sh 'find src/ include/ -name "*.cpp" -o -name "*.h" | xargs clang-format -i --dry-run -Werror || true'
            }
        }

        stage('Coverage') {
            steps {
                sh 'apt-get install -y gcovr lcov'
                sh 'cmake -B build-coverage -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage"'
                sh 'cmake --build build-coverage'
                sh './build-coverage/tests/unit_tests'
                sh 'gcovr --root . --xml-pretty --output coverage.xml'
            }
            post {
                always {
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                }
            }
        }

        stage('Package') {
            steps {
                sh 'cmake --build build --target package'
                archiveArtifacts artifacts: '*.deb,*.rpm,*.tar.gz,*.zip,build/**,dist/**', fingerprint: true
            }
        }

        stage('Documentation') {
            steps {
                sh 'apt-get install -y doxygen graphviz'
                sh 'doxygen Doxyfile || true'
                archiveArtifacts artifacts: 'docs/**,html/**,latex/**', fingerprint: true
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'C++ Pipeline completed successfully!'
        }
        failure {
            echo 'C++ Pipeline failed!'
        }
    }
}